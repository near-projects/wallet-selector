{"id":"../node_modules/near-seed-phrase/index.js","dependencies":[{"name":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/package.json","includedInParent":true,"mtime":1648045642854},{"name":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-seed-phrase/package.json","includedInParent":true,"mtime":1646196058102},{"name":"bip39-light","loc":{"line":1,"column":22,"index":22},"parent":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-seed-phrase/index.js","resolved":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/bip39-light/index.js"},{"name":"near-hd-key","loc":{"line":2,"column":31,"index":69},"parent":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-seed-phrase/index.js","resolved":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-hd-key/dist/index.js"},{"name":"bs58","loc":{"line":3,"column":21,"index":106},"parent":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-seed-phrase/index.js","resolved":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/bs58/index.js"},{"name":"tweetnacl","loc":{"line":4,"column":21,"index":136},"parent":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-seed-phrase/index.js","resolved":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/tweetnacl/nacl-fast.js"},{"name":"buffer","parent":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/near-seed-phrase/index.js","resolved":"/home/matt/Projects/mattlockyer/wallet-selector/examples/react/node_modules/buffer/index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\nconst bip39 = require('bip39-light');\nconst { derivePath } = require('near-hd-key');\nconst bs58 = require('bs58');\nconst nacl = require('tweetnacl');\n\nconst KEY_DERIVATION_PATH = \"m/44'/397'/0'\"\n\nconst generateSeedPhrase = (entropy) => {\n    return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic())\n}\n\nconst normalizeSeedPhrase = (seedPhrase) => seedPhrase.trim().split(/\\s+/).map(part => part.toLowerCase()).join(' ')\n\nconst parseSeedPhrase = (seedPhrase, derivationPath) => {\n    const seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase))\n    const { key } = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString('hex'))\n    const keyPair = nacl.sign.keyPair.fromSeed(key)\n    const publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey))\n    const secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey))\n    return { seedPhrase, secretKey, publicKey }\n}\n\nconst findSeedPhraseKey = (seedPhrase, publicKeys) => {\n    // TODO: Need to iterate through multiple possible derivation paths?\n    const keyInfo = parseSeedPhrase(seedPhrase)\n    if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n        return {}\n    }\n    return keyInfo\n}\n\nmodule.exports = {\n    KEY_DERIVATION_PATH,\n    generateSeedPhrase,\n    normalizeSeedPhrase,\n    parseSeedPhrase,\n    findSeedPhraseKey\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/near-seed-phrase/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}}],"sources":{"../node_modules/near-seed-phrase/index.js":"const bip39 = require('bip39-light');\nconst { derivePath } = require('near-hd-key');\nconst bs58 = require('bs58');\nconst nacl = require('tweetnacl');\n\nconst KEY_DERIVATION_PATH = \"m/44'/397'/0'\"\n\nconst generateSeedPhrase = (entropy) => {\n    return parseSeedPhrase(entropy !== undefined ? bip39.entropyToMnemonic(entropy) : bip39.generateMnemonic())\n}\n\nconst normalizeSeedPhrase = (seedPhrase) => seedPhrase.trim().split(/\\s+/).map(part => part.toLowerCase()).join(' ')\n\nconst parseSeedPhrase = (seedPhrase, derivationPath) => {\n    const seed = bip39.mnemonicToSeed(normalizeSeedPhrase(seedPhrase))\n    const { key } = derivePath(derivationPath || KEY_DERIVATION_PATH, seed.toString('hex'))\n    const keyPair = nacl.sign.keyPair.fromSeed(key)\n    const publicKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.publicKey))\n    const secretKey = 'ed25519:' + bs58.encode(Buffer.from(keyPair.secretKey))\n    return { seedPhrase, secretKey, publicKey }\n}\n\nconst findSeedPhraseKey = (seedPhrase, publicKeys) => {\n    // TODO: Need to iterate through multiple possible derivation paths?\n    const keyInfo = parseSeedPhrase(seedPhrase)\n    if (publicKeys.indexOf(keyInfo.publicKey) < 0) {\n        return {}\n    }\n    return keyInfo\n}\n\nmodule.exports = {\n    KEY_DERIVATION_PATH,\n    generateSeedPhrase,\n    normalizeSeedPhrase,\n    parseSeedPhrase,\n    findSeedPhraseKey\n}\n"},"lineCount":40}},"error":null,"hash":"366e838960f27922c3a602c70d02a320","cacheData":{"env":{}}}